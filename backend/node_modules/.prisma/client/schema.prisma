// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(ADMIN)
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctorProfile  Doctor?
  patientProfile Patient?
  appointments   Appointment[]

  @@map("users")
}

model Doctor {
  id              String  @id @default(cuid())
  userId          String  @unique
  licenseNumber   String  @unique
  specialization  String
  qualification   String?
  experience      Int?
  consultationFee Float?

  // Personal Information
  dateOfBirth DateTime?
  bloodGroup  String?

  // Professional Information
  department         String?
  designation        String?
  medicalDegree      String?
  boardCertification String?
  fellowships        String?
  licenseExpiryDate  DateTime?

  // Contact Information
  address String?
  city    String?
  state   String?
  zipCode String?
  country String? @default("USA")

  // Emergency Contact Information
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?

  // Additional Information
  biography    String? @db.Text
  languages    String? // JSON array of languages
  awards       String? @db.Text
  publications String? @db.Text

  // Professional Details
  hospitalAffiliations String? @db.Text
  insuranceAccepted    String? @db.Text

  // Availability Information
  availableDays      String? // JSON array of available days
  availableStartTime String? // HH:MM format
  availableEndTime   String? // HH:MM format

  // Status and Availability
  isAvailable Boolean   @default(true)
  joiningDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  schedules    DoctorSchedule[]

  @@map("doctors")
}

model Patient {
  id                    String   @id @default(cuid())
  userId                String   @unique
  dateOfBirth           DateTime
  gender                Gender
  address               String?
  emergencyContactName  String?
  emergencyContactPhone String?
  medicalHistory        String?
  allergies             String?
  bloodGroup            String?

  // Admission Information
  admitDate DateTime?
  admitTime String?
  notes     String?   @db.Text

  // Medical Information
  bloodPressure         String?
  weight                String?
  sugarStatus           String?
  sugarLevel            String?
  diabetes              String?
  problem               String? @db.Text
  diagnosis             String? @db.Text
  treatmentPlan         String? @db.Text
  doctorNotes           String? @db.Text
  labReports            String? @db.Text
  pastMedicationHistory String? @db.Text
  currentMedication     String? @db.Text

  // Registration Information
  paymentOption   String?
  hasInsurance    String?
  insuranceNumber String?
  wardNumber      String?
  doctorId        String?
  advanceAmount   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  invoices     Invoice[]

  @@map("patients")
}

model Appointment {
  id           String            @id @default(cuid())
  patientId    String?
  firstName    String?
  lastName     String?
  doctorId     String
  userId       String
  date         DateTime
  time         String?
  duration     Int               @default(30) // in minutes
  type         AppointmentType   @default(CONSULTATION)
  status       AppointmentStatus @default(SCHEDULED)
  notes        String?
  symptoms     String?
  diagnosis    String?
  prescription String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  patient Patient? @relation(fields: [patientId], references: [id])
  doctor  Doctor   @relation(fields: [doctorId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@map("appointments")
}

model Medicine {
  id                   String       @id @default(cuid())
  name                 String
  genericName          String?
  category             String
  manufacturer         String?
  dosage               String
  form                 MedicineForm @default(TABLET)
  price                Float
  stock                Int
  expiryDate           DateTime
  batchNumber          String?
  description          String?
  sideEffects          String?
  minStockLevel        Int          @default(10)
  requiresPrescription Boolean      @default(false)
  isControlled         Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@map("medicines")
}

model DoctorSchedule {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int // 0 = Sunday, 1 = Monday, etc.
  startTime String // HH:MM format
  endTime   String // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, dayOfWeek])
  @@map("doctor_schedules")
}

model Invoice {
  id          String        @id @default(cuid())
  patientId   String
  amount      Float
  description String?
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("invoices")
}

// Enums
enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  CHECK_UP
  EMERGENCY
  SURGERY
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MedicineForm {
  TABLET
  CAPSULE
  SYRUP
  INJECTION
  CREAM
  DROPS
  INHALER
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
